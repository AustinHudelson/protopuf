name: BuildAndTest

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'asset/**'
      - 'LICENSE'


jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            vcpkg: -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
            cxx: -DCMAKE_CXX_COMPILER=$GCC
            type: Debug
          - os: ubuntu-20.04
            vcpkg: -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
            cxx: -DCMAKE_CXX_COMPILER=$GCC
            type: Release
          - os: ubuntu-20.04
            gtest: -DDOWNLOAD_GTEST=ON
            cxx: -DCMAKE_CXX_COMPILER=$GCC
            type: Debug
          - os: ubuntu-20.04
            gtest: -DDOWNLOAD_GTEST=ON
            cxx: -DCMAKE_CXX_COMPILER=$GCC
            type: Release
            coverage: -DCMAKE_CXX_FLAGS=--coverage
#          - os: windows-2019
#            gtest: -DDOWNLOAD_GTEST=ON
#            type: Debug
#          - os: windows-2019
#            gtest: -DDOWNLOAD_GTEST=ON
#            type: Release
#          - os: macos-11.0
#            gtest: -DDOWNLOAD_GTEST=ON
#            cxx: -DCMAKE_CXX_COMPILER=g++-10
#            type: Debug
#          - os: macos-11.0
#            gtest: -DDOWNLOAD_GTEST=ON
#            cxx: -DCMAKE_CXX_COMPILER=g++-10
#            type: Release
#          - os: macos-11.0
#            vcpkg: -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
#            cxx: -DCMAKE_CXX_COMPILER=g++-10
#            macos_vcpkg_var: CXX=g++-10
#            type: Debug
#          - os: macos-11.0
#            vcpkg: -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
#            cxx: -DCMAKE_CXX_COMPILER=g++-10
#            macos_vcpkg_var: CXX=g++-10
#            type: Release
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: install build tools
        run: |
          wget http://kayari.org/gcc-latest/gcc-latest.deb \
          && sudo dpkg -i gcc-latest.deb
          echo "GCC=/opt/gcc-latest/bin/g++" >> $GITHUB_ENV
          echo "LD_RUN_PATH=/opt/gcc-latest/lib64" >> $GITHUB_ENV
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - name: install coverage tools
        run: sudo apt install lcov
        if: ${{ matrix.coverage }}
      - name: install tools
        run: brew install gcc
        if: ${{ startsWith(matrix.os, 'macos') }}
      - name: install deps
        run: ${{ matrix.macos_vcpkg_var }} vcpkg install gtest
        if: ${{ matrix.vcpkg }}
      - name: generate build script
        run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} ${{ matrix.gtest }} ${{ matrix.vcpkg }} ${{ matrix.cxx }} ${{ matrix.coverage }} .
      - name: build project
        run: cmake --build . --config ${{ matrix.type }}
      - name: run unit testing
        run: ctest
      - name: capture coverage
        run: lcov --directory . --capture --output-file coverage.info
        if: ${{ matrix.coverage }}
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.info
        if: ${{ matrix.coverage }}
